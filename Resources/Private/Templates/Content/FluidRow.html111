{namespace v=Tx_Vhs_ViewHelpers}
{namespace flux=FluidTYPO3\Flux\ViewHelpers}
{namespace t=Tx_T3_ViewHelpers}
<f:layout name="Content" />
<div xmlns="http://www.w3.org/1999/xhtml"
     xmlns:v="http://fedext.net/ns/vhs/ViewHelpers"
     xmlns:flux="http://fedext.net/ns/flux/ViewHelpers"
     xmlns:f="http://typo3.org/ns/fluid/ViewHelpers">

<f:section name="Configuration">
	<flux:form wizardTab="FCE" id="fluidrow" label="FCE" description="Description">
		<flux:field.select name="fordevice" label="Select device type where it will be shown" items="{all: 'All', for-desktop: 'Desktop only', for-mobile: 'Mobile only'}" />
		<flux:field.checkbox name="container" label="Container (use .container for a responsive fixed width container)" default="1"/>
		<flux:field.checkbox name="settings.fluid" label="Full-width container (use .container-fluid for a full width container, spanning the entire width of your viewport)" default="1"/>
		<flux:field.input name="mtopout" size="2" label="Margin TOP for container on OUTSIDE"/>
		<flux:field.input name="mbottomout" size="2" label="Margin BOTTOM for container on OUTSIDE"/>

		<flux:field.input name="colorcontainer" label="Background color of full-width container">
			<flux:wizard.colorPicker label="Choose color" hideParent="1" dim="20x20" width="600" height="600" exampleImg="EXT:flux/Resources/Public/Icons/ColorWheel.png"/>
		</flux:field.input>
		
		<flux:field.input name="mtopin" size="2" label="Margin TOP for container in INSIDE"/>
		<flux:field.input name="mbottomin" size="2" label="Margin BOTTOM for container in INSIDE"/>

		<flux:field.checkbox name="offrow" label="Turn off the tag with a class 'row'" />
		<flux:form.section name="columns" label="Columns">
			<flux:form.object name="column" label="Column classes">
				<flux:field.select name="class-xs" label="Phones: Width column for Extra small grid (less than 768px)" items="{f:render(section: 'Value-xs', arguments: {iteration: iteration}) -> v:iterator.loop(count: settings.gridColumns, iteration: 'iteration', minimum: 1) -> t:array.explode(addEmptyValue: 'true')}" />
				<flux:field.select name="class-offset-xs" label="Phones: Offset for Extra small grid (less than 768px) - move columns to the right using .col-xs-offset-* classes. These classes increase the left margin of a column by * columns" items="{f:render(section: 'Offset-xs', arguments: {iteration: iteration}) -> v:iterator.loop(count: 13, iteration: 'iteration', minimum: 1) -> t:array.explode(addEmptyValue: 'true')}" />
				<flux:field.select name="class-sm" label="Tablets: Width column for Small grid (up to 768 px)" items="{f:render(section: 'Value-sm', arguments: {iteration: iteration}) -> v:iterator.loop(count: settings.gridColumns, iteration: 'iteration', minimum: 1) -> t:array.explode(addEmptyValue: 'true')}" />
				<flux:field.select name="class-offset-sm" label="Tablets: Offset for Small grid (up to 768 px) - move columns to the right using .col-sm-offset-* classes. These classes increase the left margin of a column by * columns" items="{f:render(section: 'Offset-sm', arguments: {iteration: iteration}) -> v:iterator.loop(count: 13, iteration: 'iteration', minimum: 1) -> t:array.explode(addEmptyValue: 'true')}" />
				<flux:field.select name="class-md" label="Desktops: Width column for Medium grid (up to 992px)" items="{f:render(section: 'Value-md', arguments: {iteration: iteration}) -> v:iterator.loop(count: settings.gridColumns, iteration: 'iteration', minimum: 1) -> t:array.explode(addEmptyValue: 'true')}" />
				<flux:field.select name="class-offset-md" label="Desktops: Offset for Medium grid (up to 992px) - move columns to the right using .col-md-offset-* classes. These classes increase the left margin of a column by * columns" items="{f:render(section: 'Offset-md', arguments: {iteration: iteration}) -> v:iterator.loop(count: 13, iteration: 'iteration', minimum: 1) -> t:array.explode(addEmptyValue: 'true')}" />
				<flux:field.select name="class-lg" label="Larger desktops: Width column for Large grid (up to 1200px)" items="{f:render(section: 'Value-lg', arguments: {iteration: iteration}) -> v:iterator.loop(count: settings.gridColumns, iteration: 'iteration', minimum: 1) -> t:array.explode(addEmptyValue: 'true')}" />
				<flux:field.select name="class-offset-lg" label="Larger desktops: Offset for Large grid (up to 1200px) - move columns to the right using .col-ld-offset-* classes. These classes increase the left margin of a column by * columns" items="{f:render(section: 'Offset-lg', arguments: {iteration: iteration}) -> v:iterator.loop(count: 13, iteration: 'iteration', minimum: 1) -> t:array.explode(addEmptyValue: 'true')}" />
				<flux:field.input name="color" label="Background color of column">
					<flux:wizard.colorPicker label="Choose color" hideParent="1" dim="20x20" width="600" height="800" exampleImg="EXT:flux/Resources/Public/Icons/ColorWheel.png"/>
				</flux:field.input>
				<flux:field.checkbox name="addWell" label="Add Well (add bootstrap 'well' css class)" />
				<flux:field.checkbox name="fullheight" label="Full height (add 'full-height' css class)" />
				<flux:field.input name="additionalClass" label="Additional custom CSS class" />
			</flux:form.object>
		</flux:form.section>
		<flux:grid>
			<flux:grid.row>
				<f:for each="{columns}" as="sectionObject" iteration="iteration">
					<v:var.set name="width" value="{sectionObject.column.class-md -> v:format.substring(start: 7)}" />
					<v:var.set name="percent" value="{width -> v:math.division(b: 12) -> v:math.product(b: 100) -> v:math.round(decimals: 2)}" />
					<flux:grid.column style="width: {percent}%">
						<flux:form.content name="column{iteration.cycle}" label="Column#{iteration.cycle} / {percent}%" />
					</flux:grid.column>
				</f:for>
			</flux:grid.row>
		</flux:grid>
	</flux:form>
</f:section>

<f:section name="Preview">
	<flux:widget.grid />
</f:section>

<f:comment>

<f:section name="margin_top">
	<flux:form.object name="mtop">
		<flux:field.input name="mtop_value" />
	</flux:form.object>
</f:section>
<f:section name="margin_bottom">
	<flux:form.object name="mbottom">
		<flux:field.input name="mbot_value" />
	</flux:form.object>
</f:section>

</f:comment>

<f:section name="FCE">

<f:if condition="{container} == 1">
	<f:then>
<div class="container{f:if(condition: '{settings.fluid}', then: '-fluid')}{f:if(condition: '{0: \'{fordevice}\'} == {0: \'all\'}', then: '', else: ' {fordevice}')}"{v:if(then: ' style="{f:if(condition: \'{colorcontainer}\', then: \'background-color:{colorcontainer};\')}{f:if(condition: \'{mtopout}\', then: \'margin-top:{mtopout}px;\')}{f:if(condition: \'{mbottomout}\', then: \'margin-bottom:{mbottomout}px;\')}"', else: '', stack: {0: '{mtopout}', 1: 'OR', 2: '{mbottomout}', 3: 'OR', 4: '{colorcontainer}'})}>
	<div class="container"{v:if(then: ' style="{f:if(condition: \'{mtopin}\', then: \'margin-top:{mtopin}px;\')}{f:if(condition: \'{mbottomin}\', then: \'margin-bottom:{mbottomin}px;\')}"', else: '', stack: {0: '{mtopin}', 1: 'OR', 2: '{mbottomin}'})}>
	</f:then>
	<f:else></f:else>
</f:if>
		{f:if(condition: '{offrow} == 1', then: '', else: '<div class="row">')}
			<f:for each="{columns}" as="sectionObject" iteration="iteration">
				<div class={v:format.replace(substring: '" ', content: '"{f:if(condition: \'{sectionObject.column.class-lg}\', then: \'{sectionObject.column.class-lg}\')}{f:if(condition: \'{sectionObject.column.class-md}\', then: \' {sectionObject.column.class-md}\')}{f:if(condition: \'{sectionObject.column.class-sm}\', then: \' {sectionObject.column.class-sm}\')}{f:if(condition: \'{sectionObject.column.class-xs}\', then: \' {sectionObject.column.class-xs}\')}{f:if(condition: \'{sectionObject.column.class-offset-lg}\', then: \' {sectionObject.column.class-offset-lg}\')}{f:if(condition: \'{sectionObject.column.class-offset-md}\', then: \' {sectionObject.column.class-offset-md}\')}{f:if(condition: \'{sectionObject.column.class-offset-sm}\', then: \' {sectionObject.column.class-offset-sm}\')}{f:if(condition: \'{sectionObject.column.class-offset-xs}\', then: \' {sectionObject.column.class-offset-xs}\')}{f:if(condition: sectionObject.column.fullheight, then: \' full-height\')}', replacement: '"')}"{f:if(condition: sectionObject.column.color, then: ' style="background-color:{sectionObject.column.color};"')}>
					<f:if condition="{sectionObject.column.addWell}">
						<f:then>
							<div class="well{f:if(condition: sectionObject.column.additionalClass, then: ' {sectionObject.column.additionalClass}')}">
								<flux:flexform.renderContent area="column{iteration.cycle}" />
							</div>
						</f:then>
						<f:else>
							<f:if condition="{sectionObject.column.additionalClass}"><div{f:if(condition: sectionObject.column.additionalClass, then: ' class="{sectionObject.column.additionalClass}"')}></f:if>
								<flux:flexform.renderContent area="column{iteration.cycle}" />
							<f:if condition="{sectionObject.column.additionalClass}"></div></f:if>
						</f:else>
					</f:if>
				</div>
			</f:for>
		{f:if(condition: '{offrow} == 1', then: '', else: '</div>')}
<f:if condition="{container} == 1">
	<f:then>
	</div>
</div>
	</f:then>
	<f:else></f:else>
</f:if>
</f:section>

<f:section name="Offset-md">col-md-offset-{iteration.index}:'col-md-offset-{iteration.index} ({iteration.index -> v:math.division(b: 12) -> v:math.product(b: 100) -> v:math.round(decimals: 2)}%)'{f:if(condition: iteration.isLast, else: ',')}</f:section>
<f:section name="Offset-sm">col-sm-offset-{iteration.index}:'col-sm-offset-{iteration.index} ({iteration.index -> v:math.division(b: 12) -> v:math.product(b: 100) -> v:math.round(decimals: 2)}%)'{f:if(condition: iteration.isLast, else: ',')}</f:section>
<f:section name="Offset-xs">col-xs-offset-{iteration.index}:'col-xs-offset-{iteration.index} ({iteration.index -> v:math.division(b: 12) -> v:math.product(b: 100) -> v:math.round(decimals: 2)}%)'{f:if(condition: iteration.isLast, else: ',')}</f:section>
<f:section name="Offset-lg">col-lg-offset-{iteration.index}:'col-lg-offset-{iteration.index} ({iteration.index -> v:math.division(b: 12) -> v:math.product(b: 100) -> v:math.round(decimals: 2)}%)'{f:if(condition: iteration.isLast, else: ',')}</f:section>

<f:section name="Value-md">col-md-{iteration.cycle}:'col-md-{iteration.cycle} ({iteration.cycle -> v:math.division(b: 12) -> v:math.product(b: 100) -> v:math.round(decimals: 2)}%)'{f:if(condition: iteration.isLast, else: ',')}</f:section>
<f:section name="Value-sm">col-sm-{iteration.cycle}:'col-sm-{iteration.cycle} ({iteration.cycle -> v:math.division(b: 12) -> v:math.product(b: 100) -> v:math.round(decimals: 2)}%)'{f:if(condition: iteration.isLast, else: ',')}</f:section>
<f:section name="Value-xs">col-xs-{iteration.cycle}:'col-xs-{iteration.cycle} ({iteration.cycle -> v:math.division(b: 12) -> v:math.product(b: 100) -> v:math.round(decimals: 2)}%)'{f:if(condition: iteration.isLast, else: ',')}</f:section>
<f:section name="Value-lg">col-lg-{iteration.cycle}:'col-lg-{iteration.cycle} ({iteration.cycle -> v:math.division(b: 12) -> v:math.product(b: 100) -> v:math.round(decimals: 2)}%)'{f:if(condition: iteration.isLast, else: ',')}</f:section>

</div>